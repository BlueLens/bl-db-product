# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Writer(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, grade: str=None, height: int=None, weight: int=None, my_size: str=None, product_size: str=None, color: str=None):
        """
        Writer - a model defined in Swagger

        :param id: The id of this Writer.
        :type id: str
        :param grade: The grade of this Writer.
        :type grade: str
        :param height: The height of this Writer.
        :type height: int
        :param weight: The weight of this Writer.
        :type weight: int
        :param my_size: The my_size of this Writer.
        :type my_size: str
        :param product_size: The product_size of this Writer.
        :type product_size: str
        :param color: The color of this Writer.
        :type color: str
        """
        self.swagger_types = {
            'id': str,
            'grade': str,
            'height': int,
            'weight': int,
            'my_size': str,
            'product_size': str,
            'color': str
        }

        self.attribute_map = {
            'id': 'id',
            'grade': 'grade',
            'height': 'height',
            'weight': 'weight',
            'my_size': 'my_size',
            'product_size': 'product_size',
            'color': 'color'
        }

        self._id = id
        self._grade = grade
        self._height = height
        self._weight = weight
        self._my_size = my_size
        self._product_size = product_size
        self._color = color

    @classmethod
    def from_dict(cls, dikt) -> 'Writer':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Writer of this Writer.
        :rtype: Writer
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Writer.

        :return: The id of this Writer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Writer.

        :param id: The id of this Writer.
        :type id: str
        """

        self._id = id

    @property
    def grade(self) -> str:
        """
        Gets the grade of this Writer.

        :return: The grade of this Writer.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade: str):
        """
        Sets the grade of this Writer.

        :param grade: The grade of this Writer.
        :type grade: str
        """

        self._grade = grade

    @property
    def height(self) -> int:
        """
        Gets the height of this Writer.

        :return: The height of this Writer.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """
        Sets the height of this Writer.

        :param height: The height of this Writer.
        :type height: int
        """

        self._height = height

    @property
    def weight(self) -> int:
        """
        Gets the weight of this Writer.

        :return: The weight of this Writer.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight: int):
        """
        Sets the weight of this Writer.

        :param weight: The weight of this Writer.
        :type weight: int
        """

        self._weight = weight

    @property
    def my_size(self) -> str:
        """
        Gets the my_size of this Writer.

        :return: The my_size of this Writer.
        :rtype: str
        """
        return self._my_size

    @my_size.setter
    def my_size(self, my_size: str):
        """
        Sets the my_size of this Writer.

        :param my_size: The my_size of this Writer.
        :type my_size: str
        """

        self._my_size = my_size

    @property
    def product_size(self) -> str:
        """
        Gets the product_size of this Writer.

        :return: The product_size of this Writer.
        :rtype: str
        """
        return self._product_size

    @product_size.setter
    def product_size(self, product_size: str):
        """
        Sets the product_size of this Writer.

        :param product_size: The product_size of this Writer.
        :type product_size: str
        """

        self._product_size = product_size

    @property
    def color(self) -> str:
        """
        Gets the color of this Writer.

        :return: The color of this Writer.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """
        Sets the color of this Writer.

        :param color: The color of this Writer.
        :type color: str
        """

        self._color = color

