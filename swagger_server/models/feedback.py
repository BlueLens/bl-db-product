# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.writer import Writer
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Feedback(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, photo: List[str]=None, text: str=None, write_date: str=None, total_count: int=None, photo_count: int=None, likes: int=None, writer: Writer=None):
        """
        Feedback - a model defined in Swagger

        :param photo: The photo of this Feedback.
        :type photo: List[str]
        :param text: The text of this Feedback.
        :type text: str
        :param write_date: The write_date of this Feedback.
        :type write_date: str
        :param total_count: The total_count of this Feedback.
        :type total_count: int
        :param photo_count: The photo_count of this Feedback.
        :type photo_count: int
        :param likes: The likes of this Feedback.
        :type likes: int
        :param writer: The writer of this Feedback.
        :type writer: Writer
        """
        self.swagger_types = {
            'photo': List[str],
            'text': str,
            'write_date': str,
            'total_count': int,
            'photo_count': int,
            'likes': int,
            'writer': Writer
        }

        self.attribute_map = {
            'photo': 'photo',
            'text': 'text',
            'write_date': 'write_date',
            'total_count': 'total_count',
            'photo_count': 'photo_count',
            'likes': 'likes',
            'writer': 'writer'
        }

        self._photo = photo
        self._text = text
        self._write_date = write_date
        self._total_count = total_count
        self._photo_count = photo_count
        self._likes = likes
        self._writer = writer

    @classmethod
    def from_dict(cls, dikt) -> 'Feedback':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Feedback of this Feedback.
        :rtype: Feedback
        """
        return deserialize_model(dikt, cls)

    @property
    def photo(self) -> List[str]:
        """
        Gets the photo of this Feedback.

        :return: The photo of this Feedback.
        :rtype: List[str]
        """
        return self._photo

    @photo.setter
    def photo(self, photo: List[str]):
        """
        Sets the photo of this Feedback.

        :param photo: The photo of this Feedback.
        :type photo: List[str]
        """

        self._photo = photo

    @property
    def text(self) -> str:
        """
        Gets the text of this Feedback.

        :return: The text of this Feedback.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """
        Sets the text of this Feedback.

        :param text: The text of this Feedback.
        :type text: str
        """

        self._text = text

    @property
    def write_date(self) -> str:
        """
        Gets the write_date of this Feedback.

        :return: The write_date of this Feedback.
        :rtype: str
        """
        return self._write_date

    @write_date.setter
    def write_date(self, write_date: str):
        """
        Sets the write_date of this Feedback.

        :param write_date: The write_date of this Feedback.
        :type write_date: str
        """

        self._write_date = write_date

    @property
    def total_count(self) -> int:
        """
        Gets the total_count of this Feedback.

        :return: The total_count of this Feedback.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count: int):
        """
        Sets the total_count of this Feedback.

        :param total_count: The total_count of this Feedback.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def photo_count(self) -> int:
        """
        Gets the photo_count of this Feedback.

        :return: The photo_count of this Feedback.
        :rtype: int
        """
        return self._photo_count

    @photo_count.setter
    def photo_count(self, photo_count: int):
        """
        Sets the photo_count of this Feedback.

        :param photo_count: The photo_count of this Feedback.
        :type photo_count: int
        """

        self._photo_count = photo_count

    @property
    def likes(self) -> int:
        """
        Gets the likes of this Feedback.

        :return: The likes of this Feedback.
        :rtype: int
        """
        return self._likes

    @likes.setter
    def likes(self, likes: int):
        """
        Sets the likes of this Feedback.

        :param likes: The likes of this Feedback.
        :type likes: int
        """

        self._likes = likes

    @property
    def writer(self) -> Writer:
        """
        Gets the writer of this Feedback.

        :return: The writer of this Feedback.
        :rtype: Writer
        """
        return self._writer

    @writer.setter
    def writer(self, writer: Writer):
        """
        Sets the writer of this Feedback.

        :param writer: The writer of this Feedback.
        :type writer: Writer
        """

        self._writer = writer

